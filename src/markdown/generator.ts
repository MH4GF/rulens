import fs from 'node:fs/promises'
import { parseBiomeRules } from '../parsers/biome-parser.ts'
import { parseESLintRules } from '../parsers/eslint-parser.ts'
import type { BiomeRageResult } from '../tools/biome-runner.ts'
import type { ESLintConfigResult } from '../tools/eslint-runner.ts'
import { lintRulesToMarkdown } from './lint-to-markdown.ts'

interface MarkdownGeneratorOptions {
  biomeResult: BiomeRageResult
  eslintResult: ESLintConfigResult
  outputFile: string
}

/**
 * プロジェクト名を推測
 */
function guessProjectName(): string {
  try {
    // package.jsonからプロジェクト名を取得する実装も可能だが、
    // 現時点ではプロジェクト名は固定で良い
    return 'Project'
  } catch {
    return 'Project'
  }
}

/**
 * 目次を生成
 */
function generateTableOfContents(hasBiome: boolean, hasEslint: boolean): string {
  let toc = '## 📑 Table of Contents\n\n'

  toc += '- [Introduction](#introduction)\n'
  toc += '- [AI Usage Guide](#ai-usage-guide)\n'

  if (hasBiome) {
    toc += '- [Biome Rules](#biome-rules)\n'
    // カテゴリーを全て列挙することも可能だが、シンプルにする
  }

  if (hasEslint) {
    toc += '- [ESLint Rules](#eslint-rules)\n'
    // カテゴリーを全て列挙することも可能だが、シンプルにする
  }

  return toc
}

/**
 * ドキュメントヘッダーを生成
 */
function generateHeader(): string {
  const projectName = guessProjectName()
  return `# ${projectName} Lint Rules Reference\n\n## 📋 Document Overview\n\nThis document contains a comprehensive catalog of linting rules enabled in this project. It is automatically generated by [Rulens](https://github.com/MH4GF/rulens) and provides AI code assistants and developers with detailed information about code style and quality requirements.\n\n`
}

/**
 * 導入部を生成
 */
function generateIntroduction(): string {
  return (
    '## 📖 Introduction\n\n' +
    'This document lists all active linting rules configured in the project. Each rule includes:\n\n' +
    '- A link to official documentation\n' +
    '- A brief description of what the rule enforces\n' +
    '- Severity level (when available)\n\n' +
    'Use this reference to understand the code standards and avoid common issues when writing or reviewing code.\n\n'
  )
}

/**
 * AI使用ガイドを生成
 */
function generateAIUsageGuide(): string {
  return (
    '## 🤖 AI Usage Guide\n\n' +
    '**For AI Code Assistants**: When generating code for this project, please adhere to the following guidelines:\n\n' +
    `1. **Scan relevant categories first**: Focus on rules in categories related to the code you're generating.\n` +
    '2. **Respect all rules**: Ensure all generated code follows all linting rules.\n' +
    '3. **Avoid common pitfalls**: Check complexity rules to avoid anti-patterns.\n\n' +
    'When uncertain about specific rules, refer to the rule documentation links provided.\n\n'
  )
}

export async function generateMarkdown(options: MarkdownGeneratorOptions): Promise<string> {
  const { biomeResult, eslintResult, outputFile } = options

  // ドキュメントの各部分を生成
  let markdown = generateHeader()
  markdown += '---\n\n'

  // 目次を追加
  markdown += generateTableOfContents(!!biomeResult, !!eslintResult)
  markdown += '---\n\n'

  // 導入部とAI使用ガイドを追加
  markdown += generateIntroduction()
  markdown += '---\n\n'
  markdown += generateAIUsageGuide()
  markdown += '---\n\n'

  // 1. Biome設定を共通中間表現に変換
  if (biomeResult) {
    const biomeLinter = parseBiomeRules(biomeResult)
    markdown += `${lintRulesToMarkdown(biomeLinter, true)}\n`
  }

  // 2. ESLint設定を共通中間表現に変換
  if (eslintResult) {
    const eslintLinter = parseESLintRules(eslintResult)
    markdown += lintRulesToMarkdown(eslintLinter, true)
  }

  // Write to file
  await fs.writeFile(outputFile, markdown, 'utf-8')

  return markdown
}
